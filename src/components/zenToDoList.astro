---
---

<script is:inline>
    // Wait for JSConfetti to be available
    let jsConfetti;
    document.addEventListener('DOMContentLoaded', () => {
        jsConfetti = new JSConfetti();
    });
    
    // Register the Alpine component
    document.addEventListener('alpine:init', () => {
        if (!window.Alpine) {
            console.warn('Alpine.js not initialized yet');
            return;
        }
        
        Alpine.data('zenTodoList', () => ({
            init() {
                this.currentTodoCache = null;
                this.statsCache = null;
                
                this.$watch('$store.todos.items', () => {
                    this.currentTodoCache = null;
                    this.statsCache = null;
                });
            },

            currentTodoCache: null,
            statsCache: null,

            get currentTodo() {
                if (this.currentTodoCache !== null) return this.currentTodoCache;
                
                const todos = this.$store.todos.items;
                if (!todos || !todos.length) return null;
                
                const priorityOrder = {
                    'high': 3,
                    'medium': 2,
                    'low': 1,
                    'none': 0
                };
                
                this.currentTodoCache = todos.reduce((highest, task) => {
                    if (task.completed) return highest;
                    if (!highest) return task;
                    
                    const taskPriority = priorityOrder[task.priority || 'none'];
                    const highestPriority = priorityOrder[highest.priority || 'none'];
                    
                    return taskPriority > highestPriority ? task : highest;
                }, null);
                
                return this.currentTodoCache;
            },

            get hasCurrentTodo() {
                return Boolean(this.currentTodo);
            },

            get hasTasks() {
                const todos = this.$store.todos.items;
                return Boolean(todos && todos.length);
            },

            get isAllTasksComplete() {
                return this.hasTasks && !this.currentTodo;
            },

            getCompletionStats() {
                if (this.statsCache) return this.statsCache;
                
                const todos = this.$store.todos.items;
                if (!todos || !todos.length) {
                    this.statsCache = { completed: 0, total: 0, percentage: 0 };
                } else {
                    const total = todos.length;
                    const completed = todos.reduce((count, todo) => 
                        todo.completed ? count + 1 : count, 0);
                    this.statsCache = {
                        completed,
                        total,
                        percentage: Math.round((completed / total) * 100)
                    };
                }
                
                return this.statsCache;
            },

            get taskCompletionLabel() {
                const stats = this.getCompletionStats();
                return `Completed: ${stats.completed}/${stats.total}`;
            },

            get completionPercentage() {
                return this.getCompletionStats().percentage;
            },

            completeCurrentTodo() {
                if (!this.currentTodo) return;
                
                const todos = this.$store.todos.items;
                const isLastTask = !todos.some(todo => 
                    !todo.completed && todo.id !== this.currentTodo.id);
                
                this.$store.todos.toggleTodo(this.currentTodo.id);
                this.currentTodoCache = null;
                this.statsCache = null;

                if (isLastTask) {
                    const isDarkMode = document.documentElement.classList.contains('dark');
                    jsConfetti.addConfetti({
                        confettiColors: isDarkMode 
                            ? ['#60A5FA', '#93C5FD', '#3B82F6', '#2563EB', '#FFFFFF']
                            : ['#3B82F6', '#60A5FA', '#93C5FD', '#FFFFFF', '#F3F4F6'],
                        confettiNumber: 150,
                        initialVelocityX: 4,
                        initialVelocityY: 10
                    });
                }
            }
        }));
    });
</script>

<script>
    import JSConfetti from 'js-confetti';
</script>

<style>
    [x-cloak] { display: none !important; }
    
    .task-transition {
        transition: opacity 300ms ease-out, transform 300ms ease-out;
    }
    
    .task-enter { 
        opacity: 0; 
        transform: scale(0.95); 
    }
    
    .task-enter-active { 
        opacity: 1; 
        transform: scale(1); 
    }
</style>

<div
    x-data="zenTodoList"
    x-init="init(); $watch('$store.todos.items', () => {})"
    x-cloak
    class="w-full max-w-3xl mx-auto bg-white dark:bg-slate-800 rounded-xl shadow-sm p-6"
>
    <h1 class="text-4xl font-bold text-center mb-8 text-gray-800 dark:text-white">Zen Mode</h1>

    <div class="flex flex-col items-center justify-center">
        <!-- Current Todo Display -->
        <div 
            x-show="!isAllTasksComplete" 
            x-transition:enter="transition ease-out duration-300"
            x-transition:enter-start="opacity-0 scale-95"
            x-transition:enter-end="opacity-100 scale-100"
            x-transition:leave="transition ease-in duration-200"
            x-transition:leave-start="opacity-100 scale-100"
            x-transition:leave-end="opacity-0 scale-95"
            class="w-full"
        >
            <div class="flex flex-col items-center space-y-6 p-8 bg-gray-50 dark:bg-slate-700 rounded-lg shadow-inner">
                <template x-if="hasCurrentTodo && hasTasks">
                    <div 
                        class="flex flex-col items-center space-y-6"
                        x-transition:enter="transition ease-out duration-200 delay-150"
                        x-transition:enter-start="opacity-0 translate-y-4"
                        x-transition:enter-end="opacity-100 translate-y-0"
                    >
                        <p 
                            class="text-2xl text-center text-gray-800 dark:text-gray-200" 
                            x-text="currentTodo?.todo"
                        ></p>
                        <button 
                            @click="completeCurrentTodo"
                            aria-label="Mark current task as complete"
                            class="px-6 py-3 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors focus:ring-4 focus:ring-green-200 dark:focus:ring-green-900"
                        >
                            Complete
                        </button>
                    </div>
                </template>

                <template x-if="!hasTasks">
                    <div 
                        class="text-center"
                        x-transition:enter="transition ease-out duration-200 delay-150"
                        x-transition:enter-start="opacity-0 translate-y-4"
                        x-transition:enter-end="opacity-100 translate-y-0"
                    >
                        <p class="text-lg text-green-600 dark:text-green-400">
                            No tasks available! ðŸŒ±
                        </p>
                        <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">
                            Add tasks from the To Do List
                        </p>
                    </div>
                </template>
            </div>
        </div>

        <!-- Task Status Messages -->
        <div 
            x-show="isAllTasksComplete"
            x-transition:enter="transition ease-out duration-300 delay-200"
            x-transition:enter-start="opacity-0 scale-95"
            x-transition:enter-end="opacity-100 scale-100"
            x-transition:leave="transition ease-in duration-200"
            x-transition:leave-start="opacity-100 scale-100"
            x-transition:leave-end="opacity-0 scale-95"
            class="text-center"
        >
            <p class="text-lg text-green-600 dark:text-green-400">
                All tasks complete! ðŸŽ‰
            </p>
            <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">
                Add more tasks from the To Do List
            </p>
        </div>

        <!-- Progress Tracking -->
        <div x-show="hasTasks" class="w-full max-w-md mt-8">
            <div class="flex justify-between text-sm text-gray-600 dark:text-gray-400 mb-3">
                <span x-text="taskCompletionLabel"></span>
                <span x-text="completionPercentage + '%'"></span>
            </div>
            <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5">
                <div 
                    class="bg-blue-600 h-2.5 rounded-full transition-all duration-500 ease-out" 
                    :style="`width: ${completionPercentage}%`"
                    role="progressbar" 
                    :aria-valuenow="completionPercentage" 
                    aria-valuemin="0" 
                    aria-valuemax="100"
                ></div>
            </div>
        </div>
    </div>
</div>