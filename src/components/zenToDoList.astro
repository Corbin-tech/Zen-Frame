---
---

<script>
    import JSConfetti from 'js-confetti';
</script>

<script is:inline>
    // Initialize JSConfetti when the DOM is ready
    let jsConfetti;
    document.addEventListener('DOMContentLoaded', () => {
        try {
            jsConfetti = new JSConfetti();
            console.log('JSConfetti initialized successfully');
        } catch (error) {
            console.error('Error initializing JSConfetti:', error);
        }
    });
    
    // Register the Alpine component
    document.addEventListener('alpine:init', () => {
        if (!window.Alpine) {
            console.warn('Alpine.js not initialized yet');
            return;
        }
        
        Alpine.data('zenTodoList', () => ({
            init() {
                this.currentTodoCache = null;
                this.statsCache = null;
                
                this.$watch('$store.todos.items', () => {
                    this.currentTodoCache = null;
                    this.statsCache = null;
                });
            },

            currentTodoCache: null,
            statsCache: null,

            get currentTodo() {
                if (this.currentTodoCache !== null) return this.currentTodoCache;
                
                const todos = this.$store.todos.items;
                if (!todos || !todos.length) return null;
                
                const priorityOrder = {
                    'high': 3,
                    'medium': 2,
                    'low': 1,
                    'none': 0
                };
                
                // Filter out clusters and only consider actual tasks
                const tasks = todos.filter(task => !task.isCluster);
                
                this.currentTodoCache = tasks.reduce((highest, task) => {
                    if (task.completed) return highest;
                    if (!highest) return task;
                    
                    const taskPriority = priorityOrder[task.priority || 'none'];
                    const highestPriority = priorityOrder[highest.priority || 'none'];
                    
                    return taskPriority > highestPriority ? task : highest;
                }, null);
                
                return this.currentTodoCache;
            },

            get hasCurrentTodo() {
                return Boolean(this.currentTodo);
            },

            get hasTasks() {
                const todos = this.$store.todos.items;
                // Only count non-cluster items as tasks
                return Boolean(todos && todos.filter(task => !task.isCluster).length > 0);
            },
            
            // Get the name of the cluster a task belongs to
            getClusterName(taskId) {
                const task = this.$store.todos.items.find(t => t.id === taskId);
                if (!task || !task.parentId) return null;
                
                const cluster = this.$store.todos.items.find(t => t.id === task.parentId);
                return cluster ? cluster.todo : null;
            },

            get isAllTasksComplete() {
                return this.hasTasks && !this.currentTodo;
            },

            getCompletionStats() {
                if (this.statsCache) return this.statsCache;
                
                const todos = this.$store.todos.items;
                if (!todos || !todos.length) {
                    this.statsCache = { completed: 0, total: 0, percentage: 0 };
                } else {
                    // Only consider non-cluster items for stats
                    const tasks = todos.filter(task => !task.isCluster);
                    const total = tasks.length;
                    const completed = tasks.reduce((count, todo) => 
                        todo.completed ? count + 1 : count, 0);
                    this.statsCache = {
                        completed,
                        total,
                        percentage: total > 0 ? Math.round((completed / total) * 100) : 0
                    };
                }
                
                return this.statsCache;
            },

            get taskCompletionLabel() {
                const stats = this.getCompletionStats();
                return `Completed: ${stats.completed}/${stats.total}`;
            },

            get completionPercentage() {
                return this.getCompletionStats().percentage;
            },

            completeCurrentTodo() {
                if (!this.currentTodo) return;
                
                const todos = this.$store.todos.items;
                // Only consider non-cluster items when checking if this is the last task
                const nonClusterTodos = todos.filter(todo => !todo.isCluster);
                const isLastTask = !nonClusterTodos.some(todo => 
                    !todo.completed && todo.id !== this.currentTodo.id);
                
                this.$store.todos.toggleTodo(this.currentTodo.id);
                this.currentTodoCache = null;
                this.statsCache = null;

                if (isLastTask) {
                    const isDarkMode = document.documentElement.classList.contains('dark');
                    
                    // First confetti burst
                    jsConfetti.addConfetti({
                        confettiColors: isDarkMode 
                            ? ['#60A5FA', '#93C5FD', '#3B82F6', '#2563EB', '#FFFFFF']
                            : ['#3B82F6', '#60A5FA', '#93C5FD', '#FFFFFF', '#F3F4F6'],
                        confettiNumber: 200,
                        initialVelocityX: 5,
                        initialVelocityY: 12
                    });
                }
            }
        }));
    });
</script>

<style>
    .progress-bar {
        transition: width 0.5s ease-in-out;
    }
    
    .task-enter {
        opacity: 0;
        transform: scale(0.95);
    }
    
    .task-enter-active { 
        opacity: 1; 
        transform: scale(1); 
    }
</style>

<div
    x-data="zenTodoList"
    x-init="init(); $watch('$store.todos.items', () => {})"
    x-cloak
    class="w-full max-w-3xl mx-auto bg-white dark:bg-slate-800 rounded-xl shadow-sm p-6"
>
    <h1 class="text-4xl font-bold text-center mb-8 text-gray-800 dark:text-white">Zen Mode</h1>

    <div class="flex flex-col items-center justify-center">
        <!-- Current Todo Display -->
        <div 
            x-show="!isAllTasksComplete" 
            x-transition:enter="transition ease-out duration-300"
            x-transition:enter-start="opacity-0 scale-95"
            x-transition:enter-end="opacity-100 scale-100"
            x-transition:leave="transition ease-in duration-200"
            x-transition:leave-start="opacity-100 scale-100"
            x-transition:leave-end="opacity-0 scale-95"
            class="w-full"
        >
            <div class="flex flex-col items-center space-y-6 p-8 bg-gray-50 dark:bg-slate-700 rounded-lg shadow-inner">
                <template x-if="hasCurrentTodo && hasTasks">
                    <div 
                        class="flex flex-col items-center space-y-6"
                        x-transition:enter="transition ease-out duration-200 delay-150"
                        x-transition:enter-start="opacity-0 translate-y-4"
                        x-transition:enter-end="opacity-100 translate-y-0"
                    >
                        <!-- Show cluster if the task belongs to one -->
                        <div 
                            x-show="getClusterName(currentTodo?.id)" 
                            class="text-sm px-3 py-1 bg-teal-100 dark:bg-teal-900/30 text-teal-800 dark:text-teal-300 rounded-full"
                        >
                            <span x-text="getClusterName(currentTodo?.id)"></span>
                        </div>
                        
                        <p 
                            class="text-2xl text-center text-gray-800 dark:text-gray-200" 
                            x-text="currentTodo?.todo"
                        ></p>
                        <button 
                            @click="completeCurrentTodo"
                            aria-label="Mark current task as complete"
                            class="px-6 py-3 bg-teal-600 text-white rounded-lg hover:bg-teal-700 transition-colors focus:ring-4 focus:ring-teal-200 dark:focus:ring-teal-900"
                        >
                            Complete
                        </button>
                    </div>
                </template>

                <template x-if="!hasTasks">
                    <div class="text-center py-8">
                        <p class="text-xl text-gray-500 dark:text-gray-400">No tasks to display</p>
                        <p class="text-gray-400 dark:text-gray-500 mt-2">Add some tasks to get started</p>
                    </div>
                </template>
            </div>
        </div>

        <!-- All Tasks Complete Message -->
        <div 
            x-show="isAllTasksComplete && hasTasks" 
            x-transition:enter="transition ease-out duration-300"
            x-transition:enter-start="opacity-0 scale-95"
            x-transition:enter-end="opacity-100 scale-100"
            class="text-center py-8"
        >
            <p class="text-2xl text-gray-500 dark:text-gray-400 font-medium">All tasks complete!</p>
            <p class="text-gray-500 dark:text-gray-500 mt-2">Great job! Add more tasks or take a break.</p>
        </div>

        <!-- Progress Bar -->
        <div class="w-full mt-8" x-show="hasTasks">
            <div class="flex justify-between text-sm text-gray-600 dark:text-gray-400 mb-2">
                <span x-text="taskCompletionLabel"></span>
                <span x-text="completionPercentage + '%'"></span>
            </div>
            <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5">
                <div 
                    class="bg-blue-500 h-2.5 rounded-full progress-bar" 
                    :style="`width: ${completionPercentage}%`"
                ></div>
            </div>
        </div>
    </div>
</div>