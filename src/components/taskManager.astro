---
import QuickTaskInput from './QuickTaskInput.astro';
---

<div 
  x-data="taskManager()" 
  x-init="
    // Component is now fully reactive with watchers
    console.log('Task manager component mounted');
  " 
  class="w-full max-w-4xl mx-auto bg-white dark:bg-slate-800 rounded-xl shadow-lg p-8"
  data-drag-drop-container
>
    <h1 class="text-4xl font-bold text-center mb-8 text-gray-800 dark:text-white">Task Manager</h1>
    
    <!-- Quick Task Input -->
    <div class="mb-8">
        <QuickTaskInput />
    </div>
    
    <!-- Action Buttons -->
    <div class="flex justify-end mb-6">
        <button 
            x-on:click="$store.todos.deleteCompleted()"
            class="flex items-center gap-2 px-4 py-2 bg-red-50 hover:bg-red-100 dark:bg-red-900/20 dark:hover:bg-red-900/40 text-red-600 dark:text-red-400 rounded-lg transition-colors duration-200"
        >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
            </svg>
            Delete Completed
        </button>
    </div>
    
    <!-- Clusters and Tasks -->
    <div class="space-y-6 mb-8">
        <!-- Clusters -->
        <template x-for="cluster in $store.todos.items.filter(t => t.isCluster)" :key="cluster.id">
            <div 
                class="group bg-white dark:bg-slate-700 rounded-xl shadow-sm border-2 border-gray-100 dark:border-slate-600 hover:border-emerald-200 dark:hover:border-emerald-800 transition-all duration-200"
                data-cluster
                x-bind:id="'cluster-' + cluster.id"
            >
                <!-- Cluster Header -->
                <div class="flex items-center justify-between p-4 border-b border-gray-100 dark:border-slate-600">
                    <div class="flex items-center gap-3 flex-1">
                        <div 
                            data-drag-handle
                            class="p-1 cursor-move text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300"
                        >
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8h16M4 16h16" />
                            </svg>
                        </div>
                        <div class="p-1.5 bg-emerald-100 dark:bg-emerald-900/30 rounded-lg">
                            <svg class="w-5 h-5 text-emerald-600 dark:text-emerald-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                            </svg>
                        </div>
                        <input
                            type="text"
                            x-model="cluster.todo"
                            x-on:input="$store.todos.updateTask(cluster.id, { todo: cluster.todo })"
                            x-on:keydown.enter="$event.target.blur()"
                            x-on:blur="$store.todos.updateTask(cluster.id, { todo: cluster.todo })"
                            class="flex-1 text-lg font-medium bg-transparent border-none focus:ring-0 dark:text-white"
                            placeholder="Cluster Name"
                        />
                    </div>
                    <button 
                        x-on:click="$store.todos.deleteTodo(cluster.id)"
                        class="p-1.5 text-gray-400 hover:text-red-500 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg opacity-0 group-hover:opacity-100 transition-all"
                        aria-label="Delete cluster"
                    >
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                    </button>
                </div>

                <!-- Cluster Content -->
                <div class="p-4">
                    <div class="task-container pl-4 space-y-2 min-h-[50px]" data-droppable>
                        <template x-for="task in $store.todos.items.filter(t => t.parentId === cluster.id)" :key="task.id">
                            <div 
                                class="task-item relative p-3 bg-gray-50 dark:bg-slate-600 rounded-lg group/task transition-all duration-200"
                                data-task-item
                                data-task
                                x-bind:id="'task-' + task.id"
                            >
                                <div class="flex items-center gap-3">
                                    <div 
                                        data-drag-handle
                                        class="absolute left-2 top-1/2 -translate-y-1/2 p-1 cursor-move opacity-0 group-hover/task:opacity-100 text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300"
                                    >
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8h16M4 16h16" />
                                        </svg>
                                    </div>
                                    <input 
                                        type="checkbox"
                                        x-model="task.completed"
                                        class="ml-6 w-4 h-4 text-emerald-500 rounded focus:ring-emerald-500 dark:bg-slate-700 dark:border-slate-500"
                                    />
                                    <span
                                        x-text="task.todo"
                                        x-bind:class="{
                                            'line-through text-gray-400 dark:text-gray-500': task.completed,
                                            'text-gray-700 dark:text-gray-300': !task.completed
                                        }"
                                    ></span>
                                </div>
                                <button 
                                    x-on:click="$store.todos.deleteTodo(task.id)"
                                    class="absolute right-2 top-1/2 -translate-y-1/2 p-1.5 opacity-0 group-hover/task:opacity-100 text-gray-400 hover:text-red-500 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg transition-all"
                                >
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                </svg>
                                </button>
                            </div>
                        </template>
                    </div>
                </div>
            </div>
        </template>
        
        <!-- Main Container - All Non-Clustered Tasks -->
        <div 
            class="space-y-2 min-h-[50px]"
            id="mainContainer"
            data-container
            data-droppable
        >
            
            
                <template x-for="task in $store.todos.items.filter(t => !t.isCluster && !t.parentId)" :key="task.id">
                    <div 
                        class="task-item relative p-4 bg-white dark:bg-slate-700 rounded-xl shadow-sm border-2 border-gray-100 dark:border-slate-600 group/task transition-all duration-200"
                        data-task-item
                        data-task
                        x-bind:id="'task-' + task.id"
                    >
                        <div class="flex items-center gap-3">
                            <div 
                                data-drag-handle
                                class="p-1 cursor-move opacity-0 group-hover/task:opacity-100 text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300"
                            >
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8h16M4 16h16" />
                                </svg>
                            </div>
                            <input 
                                type="checkbox"
                                x-model="task.completed"
                                class="w-4 h-4 text-emerald-500 rounded focus:ring-emerald-500 dark:bg-slate-700 dark:border-slate-500"
                            />
                            <span
                                x-text="task.todo"
                                x-bind:class="{
                                    'line-through text-gray-400 dark:text-gray-500': task.completed,
                                    'text-gray-700 dark:text-gray-300': !task.completed
                                }"
                            ></span>
                        </div>
                        <button 
                            x-on:click="$store.todos.deleteTodo(task.id)"
                            class="absolute right-2 top-1/2 -translate-y-1/2 p-1.5 opacity-0 group-hover/task:opacity-100 text-gray-400 hover:text-red-500 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg transition-all"
                        >
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                        </svg>
                        </button>
                    </div>
                </template>
            </div>
        </div>
    </div>
</div>

<style>
    /* Task styling */
    .task-item {
        transition: transform 0.2s ease, box-shadow 0.2s ease, opacity 0.2s ease;
        position: relative;
    }
    
    /* Drop targets */
    .drop-target {
        border: 2px dashed #4f46e5 !important;
        background-color: rgba(79, 70, 229, 0.05) !important;
        transition: all 0.2s ease;
    }
    
    .drop-target-cluster {
        border: 2px dashed #10b981 !important;
        background-color: rgba(16, 185, 129, 0.05) !important;
        transition: all 0.2s ease;
    }
    
    /* Above drop target */
    .drop-target-above {
        box-shadow: 0 -4px 0 0 #4f46e5 !important;
        transform: translateY(4px);
        z-index: 10;
    }
    
    .drop-target-above::before {
        content: '';
        position: absolute;
        left: 0;
        right: 0;
        top: -4px;
        height: 4px;
        background-color: #4f46e5;
        border-radius: 2px;
    }
    
    /* Below drop target */
    .drop-target-below {
        box-shadow: 0 4px 0 0 #4f46e5 !important;
        transform: translateY(-4px);
        z-index: 10;
    }
    
    .drop-target-below::after {
        content: '';
        position: absolute;
        left: 0;
        right: 0;
        bottom: -4px;
        height: 4px;
        background-color: #4f46e5;
        border-radius: 2px;
    }
    
    /* When dragging, show feedback */
    [data-drag-active="true"] {
        opacity: 0.9 !important;
        transform: scale(1.02) !important;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1) !important;
        z-index: 50 !important;
        cursor: grabbing !important;
        border: 2px solid #4f46e5 !important;
    }
    
    /* Drag handle styling */
    [data-drag-handle] {
        cursor: grab;
    }
    
    [data-drag-handle]:active {
        cursor: grabbing;
    }
    
    /* Task spacing during drag */
    .task-item {
        transition: transform 0.2s ease;
        position: relative;
    }
    
    /* Empty container indication */
    .task-container:empty::before {
        content: "Drop tasks here";
        display: block;
        padding: 1rem;
        text-align: center;
        color: #9ca3af;
        font-style: italic;
    }
    
    .dark .task-container:empty::before {
        color: #6b7280;
    }
    
    /* Task item hover effect */
    .task-item:hover {
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }
    
    .dark .task-item:hover {
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.2), 0 2px 4px -1px rgba(0, 0, 0, 0.1);
    }
</style>
