---
---

<script>
    declare global {
        interface Window {
            Alpine: any;
            pomoTimer(): any;
        }
    }
</script>

<div
    x-data="pomoTimer()"
    x-init="init()"
    x-cloak
    class="w-full max-w-3xl mx-auto bg-white dark:bg-slate-800 rounded-xl shadow-sm p-6"
>
    <h1 class="text-4xl font-bold text-center mb-6 text-gray-800 dark:text-white transition-[color] duration-300 ease-in-out">Pomodoro Timer</h1>

    <!-- Timer Display -->
    <div class="flex flex-col items-center justify-center">
        
        <!-- Timer Circle -->
        <div class="relative w-72 h-72 mb-8">
            <!-- Background Circle -->
            <svg class="w-full h-full rotate-90 -scale-y-100"
                viewBox="0 0 100 100"
                role="progressbar"
                aria-label="Pomodoro progress circle">
                <circle
                    cx="50" cy="50" r="45"
                    fill="transparent"
                    stroke="currentColor"
                    stroke-width="2"
                    class="text-gray-200 dark:text-gray-700"
                />
                
                <!-- Progress Circle -->
                <circle
                    cx="50" cy="50" r="45"
                    fill="transparent"
                    stroke="currentColor"
                    stroke-width="10"
                    stroke-linecap="round"
                    :stroke-dasharray="283"
                    :stroke-dashoffset="283 - (283 * $store.pomoState.percentComplete) / 100"
                    :class="$store.pomoState.isRunning ? 'text-teal-500 dark:text-teal-400' : 'text-gray-400 dark:text-gray-500'"
                />
            </svg>
            
            <!-- Timer Text -->
            <div class="absolute top-0 left-0 w-full h-full flex flex-col items-center justify-center">
                <div class="text-6xl font-mono font-bold text-gray-800 dark:text-white">
                    <span class="transition-[color] duration-300 ease-in-out" x-text="Math.floor($store.pomoState.timeLeft / 60).toString().padStart(2, '0')"></span><span class="transition-[color] duration-300 ease-in-out">:</span><span class="transition-[color] duration-300 ease-in-out" x-text="($store.pomoState.timeLeft % 60).toString().padStart(2, '0')"></span>
                </div>
                <div class="mt-1 text-md font-medium text-gray-600 dark:text-gray-300 transition-[color] duration-300 ease-in-out" x-text="$store.pomoState.currentPresetName"></div>
            </div>
        </div>
        
        <!-- Timer Controls -->
        <div class="flex justify-center space-x-4 mb-8">
            <button
              @click="$store.pomoState.isRunning ? $store.pomoState.pauseTimer() : $store.pomoState.startTimer()"
              class="px-6 py-3 text-lg font-medium text-white bg-teal-600 hover:bg-teal-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-teal-500 focus:ring-offset-2 transition-colors duration-300 ease-in-out"
              aria-label="Start or pause Pomodoro timer"
            >
              <span x-text="$store.pomoState.isRunning ? 'Pause' : 'Start'"></span>
            </button>
            
            <button 
                @click="if (confirm('Are you sure you want to reset the current timer?')) { $store.pomoState.resetTimer() }"
                class="flex items-center gap-2 px-4 py-2 bg-red-50 hover:bg-red-100 dark:bg-red-900/20 dark:hover:bg-red-900/40 text-red-600 dark:text-red-400 rounded-lg transition-colors duration-300 ease-in-out"
        >
                <div class="flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                    </svg>
                    Reset
                </div>
            </button>
        </div>

        <!-- Timer Presets -->
        <div class="flex flex-wrap justify-center gap-3 mb-6">
            <button 
                @click="$store.pomoState.setPreset('pomodoro')"
                :class="$store.pomoState.preset === 'pomodoro' ? 'bg-teal-600 text-white ring-2 ring-teal-200 dark:ring-teal-900 shadow-sm' : 'bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-200 shadow-sm'"
                class="px-6 py-2.5 rounded-lg transition-colors duration-150 flex items-center gap-2 font-medium"
            >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                25 / 5
            </button>
            <button 
                @click="$store.pomoState.setPreset('long')"
                :class="$store.pomoState.preset === 'long' ? 'bg-teal-600 text-white ring-2 ring-teal-200 dark:ring-teal-900 shadow-sm' : 'bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-200 shadow-sm'"
                class="px-6 py-2.5 rounded-lg transition-colors duration-150 flex items-center gap-2 font-medium"
            >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                50 / 10
            </button>
            <button 
                @click="$store.pomoState.toggleBreak()"
                :class="$store.pomoState.isBreak ? 'bg-teal-600 text-white ring-2 ring-teal-200 dark:ring-teal-900 shadow-sm' : 'bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-200 shadow-sm'"
                class="px-6 py-2.5 rounded-lg transition-colors duration-150 flex items-center gap-2 font-medium"
            >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <span x-text="$store.pomoState.isBreak ? 'Work' : 'Break'"></span>
            </button>
        </div>

<script is:inline>
    document.addEventListener('alpine:init', () => {
        window.Alpine.store('pomoState', {
            totalTime: 25 * 60,  // Total time for the current mode in seconds
            timeLeft: 25 * 60,   // Remaining time in seconds
            isRunning: false,
            preset: 'pomodoro',  // pomodoro, long, or custom
            isBreak: false,
            timer: null,
            customMinutes: 5,

            init() {
                // Request notification permission
                if (Notification.permission !== "granted" && Notification.permission !== "denied") {
                    Notification.requestPermission();
                }
                
                // Initialize from localStorage if available
                this.loadState();
                this.setPreset('pomodoro');
            },
            
            get percentComplete() {
                return 100 - (this.timeLeft / this.totalTime * 100);
            },
            
            get currentPresetName() {
                if (this.preset === 'custom') {
                    return `Custom ${this.customMinutes} min`;
                }
                
                if (this.preset === 'pomodoro') {
                    return this.isBreak ? 'Recharge' : 'Burst Focus';
                }
                
                if (this.preset === 'long') {
                    return this.isBreak ? 'Recharge' : 'Extended Focus';
                }
                
                return 'Timer';
            },

            startTimer() {
                if (this.isRunning) return;
                
                this.isRunning = true;
                this.timer = setInterval(() => {
                    if (this.timeLeft > 0) {
                        this.timeLeft--;
                        this.saveState();
                    } else {
                        this.completeTimer();
                    }
                }, 1000);
            },

            pauseTimer() {
                this.isRunning = false;
                if (this.timer) {
                    clearInterval(this.timer);
                    this.timer = null;
                }
                this.saveState();
            },

            resetTimer() {
                this.isRunning = false;
                if (this.timer) {
                    clearInterval(this.timer);
                    this.timer = null;
                }
                this.updateTimerDuration();
            },
            
            completeTimer() {
                this.playAlarm();
                this.isRunning = false;
                
                if (this.timer) {
                    clearInterval(this.timer);
                    this.timer = null;
                }
                
                // Auto toggle between work and break
                this.isBreak = !this.isBreak;
                this.updateTimerDuration();
            },
            
            toggleBreak() {
                this.isBreak = !this.isBreak;
                this.updateTimerDuration();
            },

            setPreset(newPreset) {
                this.preset = newPreset;
                this.updateTimerDuration();
            },
            
            updateTimerDuration() {
                this.isRunning = false;
                if (this.timer) {
                    clearInterval(this.timer);
                    this.timer = null;
                }
                
                // Set duration based on preset and break status
                if (this.preset === 'pomodoro') {
                    this.totalTime = this.isBreak ? 5 * 60 : 25 * 60;
                } else if (this.preset === 'long') {
                    this.totalTime = this.isBreak ? 10 * 60 : 50 * 60;
                }
                
                this.timeLeft = this.totalTime;
                this.saveState();
            },
            
            setCustomTime() {
                if (this.customMinutes < 1) this.customMinutes = 1;
                if (this.customMinutes > 120) this.customMinutes = 120;
                
                this.preset = 'custom';
                this.totalTime = this.customMinutes * 60;
                this.timeLeft = this.totalTime;
                this.isRunning = false;
                
                if (this.timer) {
                    clearInterval(this.timer);
                    this.timer = null;
                }
                
                this.saveState();
            },

            playAlarm() {
                const audio = new Audio('https://assets.mixkit.co/active_storage/sfx/2869/2869-preview.mp3');
                audio.play().catch(e => console.log('Audio play failed:', e));
                
                if (Notification.permission === "granted") {
                    new Notification("Timer Complete!", {
                        body: `Your ${this.isBreak ? 'break' : 'focus'} session is complete!`,
                        icon: "/favicon.ico"
                    });
                }
            },
            
            saveState() {
                try {
                    const state = {
                        preset: this.preset,
                        isBreak: this.isBreak,
                        customMinutes: this.customMinutes
                    };
                    localStorage.setItem('pomoState', JSON.stringify(state));
                } catch (e) {
                    console.error('Error saving state:', e);
                }
            },
            
            loadState() {
                try {
                    const savedState = localStorage.getItem('pomoState');
                    if (savedState) {
                        const state = JSON.parse(savedState);
                        this.preset = state.preset || 'pomodoro';
                        this.isBreak = state.isBreak || false;
                        this.customMinutes = state.customMinutes || 5;
                    }
                } catch (e) {
                    console.error('Error loading state:', e);
                }
            }
        });
    });

    function pomoTimer() {
        return {
            init() {
                window.Alpine.store('pomoState').init();
                this.setupEventListeners();
            },
            
            setupEventListeners() {
                // Setup custom input for user-defined timer length
                const customLengthInput = document.getElementById('customLength');
                if (customLengthInput) {
                    customLengthInput.addEventListener('input', (e) => {
                        if (e.target && e.target instanceof HTMLInputElement) {
                            const value = parseInt(e.target.value);
                            if (value > 0) {
                                window.Alpine.store('pomoState').setCustomMinutes(value);
                            }
                        }
                    });
                }
                
                // Add event listener for keyboard shortcuts
                document.addEventListener('keydown', (e) => {
                    // Only process if not in an input field
                    if (document.activeElement?.tagName !== 'INPUT') {
                        if (e.code === 'Space') {
                            e.preventDefault();
                            const store = window.Alpine.store('pomoState');
                            store.isRunning ? store.pauseTimer() : store.startTimer();
                        }
                    }
                });
            }
        };
    }
</script>