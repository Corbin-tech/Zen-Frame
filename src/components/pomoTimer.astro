---
---

<script>
    declare global {
        interface Window {
            Alpine: any;
            pomoTimer(): any;
        }
    }
</script>

<div 
    x-data="pomoTimer()" 
    x-init="init()"
    class="max-w-md mx-auto p-6 bg-white dark:bg-slate-800 rounded-lg shadow-lg"
>
    <!-- Timer Display -->
    <div class="flex flex-col items-center justify-center">
        <h2 class="text-4xl font-bold text-center mb-8 text-gray-800 dark:text-white">Pomodoro Timer</h2>
        
        <!-- Timer -->
        <div class="text-6xl font-mono font-bold text-gray-700 dark:text-gray-200 mb-4">
            <span x-text="Math.floor(timeLeft / 60).toString().padStart(2, '0')"></span>:<span x-text="(timeLeft % 60).toString().padStart(2, '0')"></span>
        </div>
        
        <!-- Timer Controls -->
        <div class="flex justify-center space-x-4 mb-6">
            <template x-if="!isRunning">
                <button 
                    @click="startTimer" 
                    class="px-6 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50 dark:bg-green-600 dark:hover:bg-green-700"
                >
                    Start
                </button>
            </template>
            
            <template x-if="isRunning">
                <button 
                    @click="pauseTimer" 
                    class="px-6 py-2 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600 focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-opacity-50 dark:bg-yellow-600 dark:hover:bg-yellow-700"
                >
                    Pause
                </button>
            </template>
            
            <button 
                @click="resetTimer" 
                class="px-6 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50 dark:bg-red-600 dark:hover:bg-red-700"
            >
                Reset
            </button>
        </div>

        <!-- Mode Selection -->
        <div class="flex justify-center space-x-4">
            <button 
                @click="setMode('focus')"
                :class="mode === 'focus' ? 'bg-indigo-600' : 'bg-indigo-400'"
                class="px-6 py-2 text-white rounded-lg hover:bg-indigo-500 transition-colors"
            >
                Focus
            </button>
            <button 
                @click="setMode('break')"
                :class="mode === 'break' ? 'bg-emerald-600' : 'bg-emerald-400'"
                class="px-6 py-2 text-white rounded-lg hover:bg-emerald-500 transition-colors"
            >
                Break
            </button>
            <button 
                @click="setMode('meditation')"
                :class="mode === 'meditation' ? 'bg-amber-600' : 'bg-amber-400'"
                class="px-6 py-2 text-white rounded-lg hover:bg-amber-500 transition-colors"
            >
                Meditation
            </button>
        </div>
    </div>
</div>

<script is:inline>
    function pomoTimer() {
        return {
            timeLeft: 25 * 60,  // 25 minutes in seconds
            isRunning: false,
            mode: 'focus',
            timer: null,

            init() {
                this.setMode('focus');
            },

            startTimer() {
                if (this.isRunning) return;
                
                this.isRunning = true;
                this.timer = setInterval(() => {
                    if (this.timeLeft > 0) {
                        this.timeLeft--;
                    } else {
                        this.playAlarm();
                        this.resetTimer();
                    }
                }, 1000);
            },

            pauseTimer() {
                this.isRunning = false;
                if (this.timer) {
                    clearInterval(this.timer);
                    this.timer = null;
                }
            },

            resetTimer() {
                this.isRunning = false;
                if (this.timer) {
                    clearInterval(this.timer);
                    this.timer = null;
                }
                this.setMode(this.mode);
            },

            setMode(newMode) {
                this.mode = newMode;
                this.isRunning = false;
                if (this.timer) {
                    clearInterval(this.timer);
                    this.timer = null;
                }

                switch (newMode) {
                    case 'focus':
                        this.timeLeft = 25 * 60; // 25 minutes
                        break;
                    case 'break':
                        this.timeLeft = 5 * 60;  // 5 minutes
                        break;
                    case 'meditation':
                        this.timeLeft = 15 * 60; // 15 minutes
                        break;
                }
            },

            playAlarm() {
                const audio = new Audio('https://assets.mixkit.co/active_storage/sfx/2869/2869-preview.mp3');
                audio.play().catch(e => console.log('Audio play failed:', e));
                
                if (Notification.permission === "granted") {
                    new Notification("Timer Complete!", {
                        body: `Your ${this.mode} session is complete!`,
                        icon: "/favicon.ico"
                    });
                }
            }
        };
    }
</script>