---
---

<div class="flex gap-4">
    <div class="flex-1 flex gap-4">
        <input
            type="text"
            x-model="$store.quickTask.text"
            x-on:keyup.enter="$store.quickTask.handleEnter('task')"
            placeholder="Add a new task..."
            class="flex-1 px-4 py-2 bg-gray-50 dark:bg-slate-700 border border-gray-200 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-teal-500 dark:text-white"
        />
        <button 
            x-on:click="
                const taskId = $store.todos.addTodo($store.quickTask.text || 'New Task');
                $store.quickTask.text = '';
                
                // Trigger event to notify about task addition
                document.dispatchEvent(new CustomEvent('task-added', { 
                    detail: { taskId } 
                }));
                
                // Give DOM time to update, then force initialization again
                setTimeout(() => {
                    if (window.initTaskManagerDragDrop) {
                        window.initTaskManagerDragDrop();
                    }
                }, 100);
            "
            class="flex items-center gap-2 px-4 py-2 bg-teal-600 text-white rounded-lg hover:bg-teal-700 transition-colors"
        >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
            Add Task
        </button>
        <button 
            x-on:click="
                const clusterId = $store.todos.createCluster();
                document.dispatchEvent(new CustomEvent('task-added', { 
                    detail: { taskId: clusterId } 
                }));
                
                // Give DOM time to update, then force initialization again
                setTimeout(() => {
                    if (window.initTaskManagerDragDrop) {
                        window.initTaskManagerDragDrop();
                    }
                }, 100);
            "
            class="flex items-center gap-2 px-4 py-2 bg-teal-600 text-white rounded-lg hover:bg-teal-700 transition-colors"
        >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
            </svg>
            New Cluster
        </button>
    </div>
</div>

<script>
    // Add TypeScript interface declaration for the global function
    declare global {
        interface Window {
            initTaskManagerDragDrop: () => boolean;
        }
    }

    document.addEventListener('alpine:init', () => {
      Alpine.store('quickTask', {
        text: '',
        handleEnter(mode) {
          if (this.text?.trim()) {
            if (mode === 'task') {
              const taskId = window.Alpine.store('todos').addTodo(this.text);
              this.text = '';
              
              // Trigger event to notify about task addition
              console.log('Dispatching task-added event with ID:', taskId);
              document.dispatchEvent(new CustomEvent('task-added', { 
                detail: { taskId } 
              }));
              
              // Give DOM time to update, then force initialization again
              setTimeout(() => {
                if (window.initTaskManagerDragDrop) {
                  window.initTaskManagerDragDrop();
                }
              }, 100);
            }
          }
        }
      });
    });
</script>
