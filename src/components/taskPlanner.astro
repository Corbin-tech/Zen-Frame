---
import { initStores } from '../stores/todoStore';
import { TaskSchema } from './taskSchema';
import type { Task } from '../stores/taskTypes';

// Add type augmentation for window
declare global {
    interface Window {
        initDragAndDrop: () => Promise<void>;
        destroyDragAndDrop: () => void;
        Alpine: any;
    }
}
---

<!-- Module script for DnD initialization -->
<script>
    let isInitialized = false;
    const cleanupHandlers = new Map();
    let initializedElements = new WeakSet();

    // Cleanup function
    window.destroyDragAndDrop = function destroyDragAndDrop() {
        cleanupHandlers.forEach(handler => {
            if (typeof handler.destroy === 'function') {
                handler.destroy();
            }
        });
        cleanupHandlers.clear();
        initializedElements = new WeakSet();
        isInitialized = false;
    };

    // Export to window for Alpine access
    window.initDragAndDrop = async function initDragAndDrop() {
        if (isInitialized) {
            console.log('Drag and drop already initialized, cleaning up first...');
            window.destroyDragAndDrop();
        }

        try {
            const { draggable } = await import('@atlaskit/pragmatic-drag-and-drop/element/adapter');
            const { dropTargetForElements } = await import('@atlaskit/pragmatic-drag-and-drop/element/adapter');

            console.log('Initializing drag and drop...');

            const taskItems = document.querySelectorAll<HTMLElement>('.task-item');
            const sections = document.querySelectorAll<HTMLElement>('.task-section');

            console.log('Found task items:', taskItems.length);
            console.log('Found sections:', sections.length);

            taskItems.forEach(item => {
                // Skip if already initialized
                if (initializedElements.has(item)) {
                    console.log('Task element already initialized, skipping:', item.dataset.taskId);
                    return;
                }

                const taskId = item.dataset.taskId;
                if (!taskId) {
                    console.log('Invalid task ID');
                    return;
                }
                
                const dragHandle = item.querySelector<HTMLElement>('.drag-handle');
                if (!dragHandle) {
                    console.log('No drag handle found for item:', taskId);
                    return;
                }

                console.log('Setting up draggable for item:', taskId);
                
                const dragHandler = draggable({
                    element: item,
                    dragHandle,
                    onGenerateDragPreview: ({ nativeSetDragImage }) => {
                        nativeSetDragImage(item, dragHandle.offsetWidth / 2, dragHandle.offsetHeight / 2);
                    },
                    onDragStart: () => {
                        console.log('Drag started for:', taskId);
                        item.classList.add('opacity-50', 'border-2', 'border-blue-500');
                    },
                    onDrop: async (args) => {
                        console.log('Drop event:', args);
                        item.classList.remove('opacity-50', 'border-2', 'border-blue-500');
                        
                        if (args.location?.current?.dropTargets?.length > 0) {
                            const dropTarget = args.location.current.dropTargets[0];
                            const targetSection = dropTarget.element.closest<HTMLElement>('.task-section');
                            const newSection = targetSection?.dataset.section;
                            
                            console.log('Drop target section:', newSection);
                            
                            if (newSection && taskId) {
                                console.log('Updating task section:', taskId, 'to:', newSection);
                                window.Alpine.store('todos').updateTask(taskId, { section: newSection });
                                
                                // Force Alpine to update the UI
                                window.Alpine.store('todos').items = [...window.Alpine.store('todos').items];
                            }
                        }
                    },
                });

                cleanupHandlers.set(taskId, dragHandler);
                initializedElements.add(item);
            });

            sections.forEach(section => {
                // Skip if already initialized
                if (initializedElements.has(section)) {
                    console.log('Section element already initialized, skipping:', section.dataset.section);
                    return;
                }

                const sectionId = section.dataset.section;
                if (!sectionId) {
                    console.log('Invalid section ID');
                    return;
                }

                console.log('Setting up drop target for section:', sectionId);

                const dropHandler = dropTargetForElements({
                    element: section,
                    onDragEnter: () => {
                        console.log('Drag enter:', sectionId);
                        section.classList.add('border-2', 'border-blue-500', 'border-dashed');
                    },
                    onDragLeave: () => {
                        console.log('Drag leave:', sectionId);
                        section.classList.remove('border-2', 'border-blue-500', 'border-dashed');
                    },
                    onDrop: () => {
                        console.log('Drop on section:', sectionId);
                        section.classList.remove('border-2', 'border-blue-500', 'border-dashed');
                    }
                });

                cleanupHandlers.set(sectionId, dropHandler);
                initializedElements.add(section);
            });

            isInitialized = true;
            console.log('Drag and drop initialization complete');
        } catch (error) {
            console.error('Error initializing drag and drop:', error);
            throw error;
        }
    };
</script>

<!-- Inline script for Alpine component -->
<script is:inline>
    if (typeof window !== 'undefined') {
        document.addEventListener('alpine:init', () => {
            Alpine.data('taskPlanner', () => ({
                selectedTask: null,
                
                async init() {
                    try {
                        await this.$nextTick();
                        console.log('Initializing taskPlanner...');
                        
                        // Initialize stores first
                        window.Alpine.store('todos').init();
                        console.log('Store initialized with items:', window.Alpine.store('todos').items);
                        
                        // Initialize drag and drop after tasks are loaded
                        await window.initDragAndDrop();
                        console.log('Drag and drop initialized');

                        // Watch for changes to the store array
                        this.$watch('$store.todos.items', (newVal, oldVal) => {
                            console.log('Store items changed, reinitializing drag and drop');
                            // Wait for DOM to reflect changes
                            this.$nextTick(() => {
                                window.initDragAndDrop();
                            });
                        });
                    } catch (error) {
                        console.error('Error in taskPlanner init:', error);
                    }
                },

                updateTaskPriority(taskId, priority) {
                    if (!taskId) return;
                    window.Alpine.store('todos').updateTask(taskId, { priority });
                    this.selectedTask = null;
                },

                getPriorityIcon(priority) {
                    const baseClasses = "w-5 h-5 theme-transition";
                    if (!priority || priority === 'none') {
                        return `<div x-cloak class="${baseClasses}">
                            <svg class="${baseClasses}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z"></path>
                            </svg>
                        </div>`;
                    }
                    
                    const marks = {
                        'low': '!',
                        'medium': '!!',
                        'high': '!!!'
                    };
                    
                    const colors = {
                        'high': 'text-red-500',
                        'medium': 'text-yellow-500',
                        'low': 'text-green-500'
                    };
                    
                    return `<div x-cloak class="${colors[priority] || ''} ${baseClasses}">
                        <span class="font-bold text-lg">${marks[priority] || ''}</span>
                    </div>`;
                }
            }));
        });
    }
</script>

<div 
    x-data="taskPlanner"
    x-init="init"
    class="relative"
>
    <!-- Unassigned Tasks Container -->
    <div 
        class="task-section bg-white dark:bg-slate-800 rounded-lg shadow-md p-4 mb-6 transition-none"
        data-section="drag task from here"
        x-transition:enter="container-enter"
        x-transition:enter-start="container-enter"
        x-transition:enter-end="container-enter-active"
        x-transition:leave="container-leave"
        x-transition:leave-start="container-leave"
        x-transition:leave-end="container-leave-active"
    >
        <h2 class="text-lg font-semibold text-gray-800 dark:text-white mb-4">Drag tasks from here</h2>
        
        <div class="space-y-2">
            <template x-for="task in $store.todos.items.filter(t => t.section === 'drag task from here')" :key="task.id">
                <div 
                    class="task-item relative py-1" 
                    x-cloak 
                    :data-task-id="task.id"
                >
                    <div class="flex items-center p-3 bg-white dark:bg-slate-700 rounded-lg shadow-sm border border-gray-100 dark:border-gray-600 group hover:shadow-md">
                        <div class="drag-handle cursor-move mr-2">
                            <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8h16M4 16h16"></path>
                            </svg>
                        </div>
                        <div class="flex items-center justify-between flex-1">
                            <span 
                                x-text="task.todo"
                                class="text-gray-700 dark:text-gray-200"
                            ></span>
                            <button 
                                x-on:click="selectedTask = task"
                                x-html="getPriorityIcon(task.priority)"
                                class="transition-colors duration-200 relative w-5 h-5 flex items-center justify-center text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300"
                            ></button>
                        </div>
                    </div>
                </div>
            </template>
            <template x-if="$store.todos.items.filter(t => t.section === 'drag task from here').length === 0">
                <p 
                    x-show="$store.todos.items.filter(t => t.section === 'drag task from here').length === 0"
                    x-cloak
                    x-transition:enter="theme-enter"
                    x-transition:enter-start="theme-enter"
                    x-transition:enter-end="theme-enter-active"
                    x-transition:leave="theme-leave"
                    x-transition:leave-start="theme-leave"
                    x-transition:leave-end="theme-leave-active"
                    class="text-gray-600 dark:text-gray-400 text-sm"
                >
                    No tasks to drag from here
                </p>
            </template>
        </div>
    </div>

    <!-- Task Sections -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        <!-- Today Section -->
        <div class="task-section" data-section="today">
            <div 
                class="p-4 bg-white dark:bg-slate-800 rounded-lg shadow-md min-h-[300px] transition-none"
            >
                <h3 class="text-lg font-semibold mb-4 text-gray-800 dark:text-white">Today's Tasks</h3>
                <div class="space-y-2">
                    <template x-for="task in $store.todos.items.filter(t => t.section === 'today')" :key="task.id">
                        <div 
                            class="task-item relative py-1" 
                            x-cloak 
                            :data-task-id="task.id"
                        >
                            <div class="flex items-center p-3 bg-white dark:bg-slate-700 rounded-lg shadow-sm border border-gray-100 dark:border-gray-600 group hover:shadow-md">
                                <div class="drag-handle cursor-move mr-2">
                                    <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8h16M4 16h16"></path>
                                    </svg>
                                </div>
                                <div class="flex items-center justify-between flex-1">
                                    <span 
                                        x-text="task.todo"
                                        class="text-gray-700 dark:text-gray-200"
                                    ></span>
                                    <button 
                                        x-on:click="selectedTask = task"
                                        x-html="getPriorityIcon(task.priority)"
                                        class="transition-colors duration-200 relative w-5 h-5 flex items-center justify-center text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300"
                                    ></button>
                                </div>
                            </div>
                        </div>
                    </template>
                    <template x-if="$store.todos.items.filter(t => t.section === 'today').length === 0">
                        <p 
                            x-show="$store.todos.items.filter(t => t.section === 'today').length === 0"
                            x-cloak
                            x-transition:enter="theme-enter"
                            x-transition:enter-start="theme-enter"
                            x-transition:enter-end="theme-enter-active"
                            x-transition:leave="theme-leave"
                            x-transition:leave-start="theme-leave"
                            x-transition:leave-end="theme-leave-active"
                            class="text-gray-600 dark:text-gray-400 text-sm"
                        >
                            No tasks for today.
                        </p>
                    </template>
                </div>
            </div>
        </div>

        <!-- Tomorrow Section -->
        <div class="task-section" data-section="tomorrow">
            <div 
                class="p-4 bg-white dark:bg-slate-800 rounded-lg shadow-md min-h-[300px] transition-none"
            >
                <h3 class="text-lg font-semibold mb-4 text-gray-800 dark:text-white">Tomorrow's Tasks</h3>
                <div class="space-y-2">
                    <template x-for="task in $store.todos.items.filter(t => t.section === 'tomorrow')" :key="task.id">
                        <div 
                            class="task-item relative py-1" 
                            x-cloak 
                            :data-task-id="task.id"
                        >
                            <div class="flex items-center p-3 bg-white dark:bg-slate-700 rounded-lg shadow-sm border border-gray-100 dark:border-gray-600 group hover:shadow-md">
                                <div class="drag-handle cursor-move mr-2">
                                    <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8h16M4 16h16"></path>
                                    </svg>
                                </div>
                                <div class="flex items-center justify-between flex-1">
                                    <span 
                                        x-text="task.todo"
                                        class="text-gray-700 dark:text-gray-200"
                                    ></span>
                                    <button 
                                        x-on:click="selectedTask = task"
                                        x-html="getPriorityIcon(task.priority)"
                                        class="transition-colors duration-200 relative w-5 h-5 flex items-center justify-center text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300"
                                    ></button>
                                </div>
                            </div>
                        </div>
                    </template>
                    <template x-if="$store.todos.items.filter(t => t.section === 'tomorrow').length === 0">
                        <p 
                            x-show="$store.todos.items.filter(t => t.section === 'tomorrow').length === 0"
                            x-cloak
                            x-transition:enter="theme-enter"
                            x-transition:enter-start="theme-enter"
                            x-transition:enter-end="theme-enter-active"
                            x-transition:leave="theme-leave"
                            x-transition:leave-start="theme-leave"
                            x-transition:leave-end="theme-leave-active"
                            class="text-gray-600 dark:text-gray-400 text-sm"
                        >
                            No tasks for tomorrow.
                        </p>
                    </template>
                </div>
            </div>
        </div>

        <!-- Backlog Section -->
        <div class="task-section" data-section="backlog">
            <div 
                class="p-4 bg-white dark:bg-slate-800 rounded-lg shadow-md min-h-[300px] transition-none"
            >
                <h3 class="text-lg font-semibold mb-4 text-gray-800 dark:text-white">Backlog</h3>
                <div class="space-y-2">
                    <template x-for="task in $store.todos.items.filter(t => t.section === 'backlog')" :key="task.id">
                        <div 
                            class="task-item relative py-1" 
                            x-cloak 
                            :data-task-id="task.id"
                        >
                            <div class="flex items-center p-3 bg-white dark:bg-slate-700 rounded-lg shadow-sm border border-gray-100 dark:border-gray-600 group hover:shadow-md">
                                <div class="drag-handle cursor-move mr-2">
                                    <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8h16M4 16h16"></path>
                                    </svg>
                                </div>
                                <div class="flex items-center justify-between flex-1">
                                    <span 
                                        x-text="task.todo"
                                        class="text-gray-700 dark:text-gray-200"
                                    ></span>
                                    <button 
                                        x-on:click="selectedTask = task"
                                        x-html="getPriorityIcon(task.priority)"
                                        class="transition-colors duration-200 relative w-5 h-5 flex items-center justify-center text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300"
                                    ></button>
                                </div>
                            </div>
                        </div>
                    </template>
                    <template x-if="$store.todos.items.filter(t => t.section === 'backlog').length === 0">
                        <p 
                            x-show="$store.todos.items.filter(t => t.section === 'backlog').length === 0"
                            x-cloak
                            x-transition:enter="theme-enter"
                            x-transition:enter-start="theme-enter"
                            x-transition:enter-end="theme-enter-active"
                            x-transition:leave="theme-leave"
                            x-transition:leave-start="theme-leave"
                            x-transition:leave-end="theme-leave-active"
                            class="text-gray-600 dark:text-gray-400 text-sm"
                        >
                            No backlog tasks.
                        </p>
                    </template>
                </div>
            </div>
        </div>
    </div>

    <!-- Done Section -->
    <div class="mt-6">
        <div 
            class="p-4 bg-white dark:bg-slate-800 rounded-lg shadow-md min-h-[100px] transition-none"
        >
            <h3 class="text-lg font-semibold mb-4 text-gray-800 dark:text-white">Completed Tasks</h3>
            <div class="space-y-2">
                <template x-for="task in $store.todos.items.filter(t => t.completed)" :key="task.id">
                    <div class="task-item relative py-1" x-cloak>
                        <div
                            x-bind:id="task.id"
                            class="p-3 bg-white dark:bg-slate-700 rounded-lg shadow-sm opacity-50 border border-gray-100 dark:border-gray-600"
                        >
                            <div class="flex items-center justify-between">
                                <span x-text="task.todo" class="text-gray-700 dark:text-gray-200 line-through"></span>
                                <span x-text="new Date(task.completedAt).toLocaleDateString()" class="text-sm text-gray-500"></span>
                            </div>
                        </div>
                    </div>
                </template>
            </div>
        </div>
    </div>

    <!-- Priority Modal -->
    <div
        x-show="selectedTask"
        x-cloak
        class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
        x-on:click="selectedTask = null"
    >
        <div 
            class="bg-white dark:bg-slate-800 p-6 rounded-lg shadow-xl w-96"
            x-on:click.stop
        >
            <h3 class="text-xl font-semibold mb-4 text-gray-800 dark:text-white">Set Priority</h3>
            
            <div class="space-y-4">
                <template x-for="priority in ['none', 'low', 'medium', 'high']" :key="priority">
                    <button
                        x-on:click="() => { updateTaskPriority(selectedTask.id, priority); selectedTask = null; }"
                        x-bind:class="{
                            'bg-gray-100 dark:bg-slate-700': selectedTask?.priority === priority,
                            'hover:bg-gray-50 dark:hover:bg-slate-600': selectedTask?.priority !== priority
                        }"
                        class="w-full p-3 rounded-lg text-left text-gray-700 dark:text-gray-200"
                        x-cloak
                    >
                        <div class="flex items-center space-x-3">
                            <div x-html="getPriorityIcon(priority)" class=""></div>
                            <span x-text="priority.charAt(0).toUpperCase() + priority.slice(1)" class=""></span>
                        </div>
                    </button>
                </template>
            </div>
            
            <div class="mt-6 flex justify-end">
                <button
                    x-on:click="selectedTask = null"
                    class="px-4 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200"
                >
                    Cancel
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    [x-cloak] { 
        display: none !important; 
    }
    
    /* Theme transitions */
    .theme-enter {
        opacity: 0;
        transform: translateY(5px);
    }
    
    .theme-enter-active {
        opacity: 1;
        transform: translateY(0);
        transition: opacity 300ms ease-out, transform 300ms ease-out;
    }
    
    .theme-leave {
        opacity: 1;
        transform: translateY(0);
    }
    
    .theme-leave-active {
        opacity: 0;
        transform: translateY(-5px);
        transition: opacity 300ms ease-in, transform 300ms ease-in;
    }
    
    /* Container transitions */
    .container-enter {
        opacity: 0;
        transform: scale(0.95);
    }
    
    .container-enter-active {
        opacity: 1;
        transform: scale(1);
        transition: opacity 200ms ease-out, transform 200ms ease-out;
    }
    
    .container-leave {
        opacity: 1;
        transform: scale(1);
    }
    
    .container-leave-active {
        opacity: 0;
        transform: scale(0.95);
        transition: opacity 200ms ease-in, transform 200ms ease-in;
    }
    
    .task-item {
        transition: all 0.2s ease;
        user-select: none;
    }
    
    .task-item.dragging {
        opacity: 0.5;
        border: 2px dashed #3b82f6;
    }

    .drag-handle {
        cursor: move;
        touch-action: none;
    }
    
    .task-item {
        transition: all 0.2s ease;
    }
    
    .task-item.dragging {
        opacity: 0.5;
        border: 2px dashed #3b82f6;
    }
</style>
